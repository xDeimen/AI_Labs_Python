# -*- coding: utf-8 -*-
"""Lab13_Pix2Pix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sh3mDpIQgz2U0L0L0jLsITBqp57NiiLX
"""

import tensorflow as tf 
import os
import pathlib
import time
import datetime 
from matplotlib import pyplot as plt 
from IPython import display
# Loading the data set
dataset_name = "facades" #@param ["cityscapes", "edges2handbags", "edges2shoes", "facades", "maps", "night2day"]

_URL = f'http://efrosgans.eecs.berkeley.edu/pix2pix/datasets/{dataset_name}.tar.gz' 
path_to_zip = tf.keras.utils.get_file(fname=f"{dataset_name}.tar.gz", 
                                      origin=_URL,
                                      extract=True)
path_to_zip = pathlib.Path(path_to_zip) 
PATH = path_to_zip.parent/dataset_name 
list(PATH.parent.iterdir())

sample_image = tf.io.read_file(str(PATH / 'train/1.jpg'))
sample_image = tf.io.decode_jpeg(sample_image)
print(sample_image.shape)
plt.figure()
plt.imshow(sample_image)

def load(image_file):
  image = tf.io.read_file(image_file)
  image = tf.io.decode_jpeg(image)

  #Split each image tensor into two tensors:
  #-one with a real building facade image
  #- one with an architecture label image

  w = tf.shape(image)[1]
  w = w // 2

  input_image = image[:, w:, :]
  real_image = image[:, :w, :]

  #convert both imnages to float32 tensors
  input_image = tf.cast(input_image, tf.float32)
  real_image = tf.cast(real_image, tf.float32)
  
  return input_image, real_image

inp, re = load(str(PATH / 'train/100.jpg'))

plt.figure()
plt.imshow(inp / 255.0)
plt.figure()
plt.imshow(re / 255.0)

BUFFER_SIZE = 400
BATCH_SIZE = 1
IMG_WIDTH = 256
IMG_HEIGHT = 256

def resize(input_image, real_image, height, width):
  input_image = tf.image.resize(input_image, [height, width],
                                method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)
  real_image = tf.image.resize(real_image, [height, width],
                                method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)
  
  return input_image, real_image

def random_crop(input_image, real_image):
  stacked_image = tf.stack([input_image, real_image], axis=0)
  cropped_image = tf.image.random_crop(
      stacked_image, size=[2, IMG_HEIGHT, IMG_WIDTH, 3])
  return cropped_image[0], cropped_image[1]

#Normalize
def normalize(input_image, real_image):
  input_image = (input_image / 127.5) - 1
  real_image = (real_image / 127.5) - 1

  return input_image, real_image

