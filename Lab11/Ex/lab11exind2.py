# -*- coding: utf-8 -*-
"""Lab11Exind2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1egcI5Qc1SfZtC-HqQuQmGIXDt5eo94Vv
"""

"""
Aduceti imbunatatiri retelei din exemplul de mai jos pentru a creste acuratetea. Modelul trebuie gandit pentru recunoasterea cifrelor 0,1,2,....9.
Crestem epochs
modelul a fost antrenat pe colab si descarcat pt ca a fost mai rapid la train
"""

"""
PARTEA DE TRAIN

import keras 
from keras.datasets import mnist 
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
(x_train, y_train), (x_test, y_test) = mnist.load_data()
print(x_train.shape, y_train.shape)
x_train= x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test= x_test.reshape(x_test.shape[0], 28, 28, 1)
input_shape= (28, 28, 1)
num_classes= 10
y_train= keras.utils.to_categorical(y_train, num_classes)
y_test= keras.utils.to_categorical(y_test, num_classes)
x_train= x_train.astype('float32')
x_test= x_test.astype('float32')
x_train/= 255
x_test/= 255
print('forma setuluide antrenare:', x_train.shape)
print(x_train.shape[0], 'esantioanede antrenare')
print(x_test.shape[0], 'esantioanede testare')

batch_size= 128
num_classes= 10
epochs = 10
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=input_shape))
model.add(Conv2D(64, (9, 9), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(num_classes, activation='softmax'))
model.compile(loss=keras.losses.categorical_crossentropy,optimizer=keras.optimizers.Adadelta(),metrics=['accuracy'])
hist = model.fit(x_train, y_train,batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(x_test, y_test))
print("Modelula fost antrenat")
model.save('mnist.h5')
print("Salvammodelulca mnist.h5")
score = model.evaluate(x_test, y_test, verbose=0)
print('Test functie pierdere:', score[0])
print('Test acuratete:', score[1])

"""


from keras.models import load_model
from tkinter import *
import tkinter as tk
import win32gui
import pyautogui # esentialin relatiecu win32gui
from PIL import ImageGrab, Image
import numpy as np

model = load_model('mnist.h5')
print(model)
def predict_digit(img):
  img= img.resize((28,28))
  img= img.convert('L') # stocheazain greyscale nu color ca 'P'
  #img.show()
  img.save("Im_cifra_small.jpg")
  img= np.array(img)
  img= img.reshape(1,28,28,1)
  img= img/255.0
  res = model.predict([img])[0]
  print(res)
  return np.argmax(res), max(res)

class App(tk.Tk):
  def __init__(self):
    tk.Tk.__init__(self)
    self.x= self.y= 0
    self.canvas= tk.Canvas(self, width=300, height=300, bg= "white", cursor="cross")
    self.label= tk.Label(self, text="Gandeste..", font=("Helvetica", 48))
    self.classify_btn= tk.Button(self, text = "Recunoaste", command = self.classify_handwriting)
    self.button_clear= tk.Button(self, text = "Sterge", command = self.clear_all)
    self.canvas.grid(row=0, column=0, pady=2, sticky=W, )
    self.label.grid(row=0, column=1,pady=2, padx=2)
    self.classify_btn.grid(row=1, column=1, pady=2, padx=2)
    self.button_clear.grid(row=1, column=0, pady=2)
    #mouse-ul
    self.canvas.bind("<B1-Motion>", self.draw_lines)
    
  def clear_all(self):
    self.canvas.delete("all") 

  def classify_handwriting(self):
    HWND = self.canvas.winfo_id() 
    # administrareCANVAS
    rect= win32gui.GetWindowRect(HWND) # preluarecoordonateCANVAS
    im= ImageGrab.grab(rect)#im.show()   
    im.save("Im_cifra.jpg")
    a,b,c,d= rect
    print(a, b, c, d)
    #im = ImageGrab.grab((a,b,c,d))
    digit, acc = predict_digit(im)
    self.label.configure(text= str(digit)+'| acuratete: '+ str(int(acc*100))+'%')
  def draw_lines(self, event):
    self.x= event.x
    self.y= event.y
    r=8
    self.canvas.create_oval(self.x-r, self.y-r, self.x+ r, self.y+ r, fill='black')
app = App()
app.mainloop()